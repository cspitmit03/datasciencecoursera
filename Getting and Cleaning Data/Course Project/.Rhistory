store <- rbind(store,df)
}
m1 <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
m1
ginger <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
username <- "violetchachki"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
if(grepl(received_profile$username,username)){
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',user_id,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
print(i)
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
}
violet <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
username <- "pearliaison"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
if(grepl(received_profile$username,username)){
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',user_id,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
print(i)
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
}
ginger
violet
username
pearl <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
pearl
ginger
pearl
violet
pearl
ginger
pearl
hashtag <- "teampearl"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
received_profile
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
store
teampearl <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teampearl
hashtag <- "teamginger"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
teamginger <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teamginger
teampearl
teampearl
hashtag
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
user_id
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
received_profile
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
user_id
user_id <- received_profile$id
user_id
received_profile
tagname <- received_profile$name
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
tagname
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
teamginger <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teamginger
hashtag <- "teampearl"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
tagname <- received_profile$name
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
teampearl <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teampearl
media$pagination
store
datetest
backintime
isTRUE(datetest < as.POSIXct(backintime)
isTRUE(datetest < as.POSIXct(backintime))
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
getwd()
setwd("/Users/cesarespitia/Documents/datasciencecoursera/Reproducible Research/Assignment 1")
list.files()
setwd("Reproducable Research")
list.files()
setwd("/Users/cesarespitia/Documents/datasciencecoursera/Reproducible Research/Assignment 1")
list.files()
activity <- read.csv("activity.csv", header=T)
head(activity)
summary(activity)
mean(activity$steps, na.rm=true)
mean(activity$steps)
library(dplyr)
data <- df(activity)
data <- tbl_df(activity)
head(data)
data
mean(activity$steps, na.rm=T)
test <- complete.cases(activity)
test
test <- na.omit(data)
test
data
test
mean(test, steps)
test
mean(test$steps)
mean(activity$steps, na.rm=T)
byday <- group_by(test, date)
byday
summarise(byday, sum(steps))
stepsbyday <- summarise(byday, sum(steps))
stepsbyday
stepsbyday <- summarise(byday, sum(steps) "Daily Steps")
stepsbyday <- summarise(byday, Daily Steps = sum(steps))
stepsbyday <- summarise(byday, sum(steps) 'Daily Steps')
stepsbyday <- summarise(byday, DailySteps = sum(steps))
stepsbyday
histogram(stepsbyday)
hist(stepsbyday)
hist(stepsbyday$DailySteps)
hist(stepsbyday$DailySteps, breaks = 12)
hist(stepsbyday$DailySteps, breaks = 31)
hist(stepsbyday$DailySteps, breaks = 10)
summarise(stepsbyday, mean = mean(DailySteps))
summarise(stepsbyday, median = median(DailySteps))
library(lattice)
library(ggplot2)
xyplot(DailySteps | date, data=stepsbyday, type = "l")
xyplot(DailySteps | date, stepsbyday, type = "l")
xyplot(date, stepsbyday, type = "l")
ggplot(stepsbyday, aes(date, DailySteps))
ggplot(stepsbyday, aes(date, DailySteps)) + geom_point(aes(size = DailySteps)) + geom_smooth()
ggplot(stepsbyday, aes(date, DailySteps)) + geom_point(aes(size = DailySteps)) + geom_smooth(aes(group = 1))
ggplot(stepsbyday, aes(date, DailySteps)) + geom_point(aes(size = DailySteps)) + scale_size_area()
stepsbyday
data
stepsbyday <- summarise(byday, DailySteps = sum(steps), MeanSteps = mean(steps), MedianSteps = median(steps))
stepsbyday
stepsbyday <- summarise(byday,  MedianSteps = median(steps))
stepsbyday <- summarise(byday, DailySteps = sum(steps), MeanSteps = mean(steps), MedianSteps = median(steps))
summarise(byday,  MedianSteps = median(steps))
print(stepsbyday)
stepsbyday[1:53]
stepsbyday[,1:53]
getwd()
setwd("/Users/cesarespitia/Documents/datasciencecoursera")
list.files()
setwd("Reproducible Research")
list.files()
setwd("Assignment 1")
list.files()
knit2html()
library(knitr)
knit2html()
getwd()
setwd("/Users/cesarespitia/Documents/datasciencecoursera/Getting and Cleaning Data")
getwd)
getwd()
list.files
download
data <- read.csv("getdata-data-ss06hid.csv", headers=T)
data <- read.csv("getdata-data-ss06hid.csv", header=T)
library(dplyr)
agricultureLogical <- subset(data, ACR == 3, AGS ==6)
agricultureLogical
agricultureLogical <- filter(data, ACR == 3, AGS ==6)
agricultureLogical
which(agricultureLogical)[1:3]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
file <- file.path(getwd(), "jeff.jpg")
download.file(url, file, mode = "wb", method = "curl")
img <- readJPEG(file, native = TRUE)
library(JPEG)
install.packages("jpeg")
library(JPEG)
img <- readJPEG(file, native = TRUE)
library(jpeg)
img <- readJPEG(file, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
setwd("Course Project")
list.files()
uci_hard_dir <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sep = "")
activity_labels_file <- paste(uci_hard_dir, "/activity_labels.txt", sep = "")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
head(y_test_file)
y_test_file
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
head(subject_test)
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <- cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
sensor_data
head(sensor_data)
sensor_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
names(sensor_data) <- sensor_labels
head(sensor_data)
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
head(sensor_data_mean_std)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./Data.zip",method="curl")
download.file(url,destfile="./Data.zip",method="curl")
unzip(zipfile="./Data.zip")
unzip(zipfile="./Data.zip")
path <- file.path("UCI HAR Dataset")
path
list.files(path, recursive=TRUE)
list.files(path)
TestSubject <- table_df(file.path(allfiles[14]))
library(dplyr)
TestSubject <- table_df(file.path(allfiles[14]))
TestSubject <- tbl_df(file.path(allfiles[14]))
head(allfiles)
allfiles <- list.files(path, recursive=TRUE)
head(allfiles)
TestSubject <- tbl_df(file.path(allfiles[14]))
TestSubject <- read.table(file.path(allfiles[14]), header=FALSE)
getwd()
TestSubject <- read.table(file.path(path,allfiles[14]), header=FALSE)
head(TestSubject)
##read in for test
TestSubject <- read.table(file.path(path,allfiles[14]), header=FALSE)
TestFeatures <- read.table(file.path(path,allfiles[15]), header=FALSE)
TestActivity <- read.table(file.path(path,allfiles[14]), header=FALSE)
##read in for train
TrainSubject <- read.table(file.path(path,allfiles[26]), header=FALSE)
TrainFeatures <- read.table(file.path(path,allfiles[27]), header=FALSE)
TrainActivity <- read.table(file.path(path,allfiles[28]), header=FALSE)
dim(TestSubject)
dim(TestFeatures)
dim(TestActivity)
dim(TrainSubject)
dim(TrainFeatures)
dim(trainActivity)
dim(TrainActivity)
SubjectAll <- rbind(TrainSubject, TestSubject)
ActivityAll <- rbind(TrainActivity, TestActivity)
FeaturesAll <- rbind(TrainFeatures, TestFeatures)
dim(SubjectAll)
dim(ActivityAll)
featcolnames <- read.table(file.path(path, "features.txt"), header=FALSE)
featcolnames
SubjectAll <- rbind(TrainSubject, TestSubject)
ActivityAll <- rbind(TrainActivity, TestActivity)
FeaturesAll <- rbind(TrainFeatures, TestFeatures)
dim(SubjectAll)
colnames(SubjectAll) <- c("Subject")
colnames(ActivityAll) <- c("Activity")
head(SubjectAll)
head(ActivityAll)
colnames(FeaturesAll) <- featcolnames$V2
head(FeaturesAll)
AllData <- cbind(SubjectAll, ActivityAll, FeaturesAll)
dim(AllData)
head(AllData)
Data <- tbl_df(AllData)
Data
grep("mean", featcolnames)
grep("mean", featcolnames$V2)
grep("mean()", featcolnames$V2)
grep("mean\\(\\)", featcolnames$V2)
featcolnames[grep("mean\\(\\)", featcolnames$V2)]
featcolnames$V2[grep("mean\\(\\)", featcolnames$V2)]
featcolnames$V2[grep("mean\\(\\)|std\\(\\)", featcolnames$V2)]
selectcols <- featcolnames$V2[grep("mean\\(\\)|std\\(\\)", featcolnames$V2)]
dim(selectcols)
str(selectcols)
naming <- c("Subject", "Activity", as.character(selectcols))
SmallData <- subset(AllData, select = naming)
str(SmallData)
activityNames <- read.table(file.path(path,"activity_labels.txt"), header=FALSE)
activityNames
MeanStdData <- tbl_df(SmallData)
MeanStdData
anames <- tbl_df(activityNames)
left_join(MeanStdData, anames)
left_join(MeanStdData, anames, by.x=Activity, by.y=V1)
left_join(MeanStdData, anames, by.x="Activity"Activity"", by.y="V1")
left_join(MeanStdData, anames, by.x="Activity", by.y="V1")
anames
anames <- tbl_df(activityNames)
anames <- rename(anames, V1 = Activity, V2 = ActivityNames)
anames <- tbl_df(activityNames)
anames <- rename(anames, V1 = Activity, V2 = "ActivityNames")
anames <- tbl_df(activityNames)
anames <- rename(anames, V1 = "Activity", V2 = "ActivityNames")
colnames(activityNames) <- c("Activity", "ActivityNames")
anames <- tbl_df(activityNames)
anames
left_join(MeanStdData, anames, by="Activity")
NewData <- left_join(MeanStdData, anames, by="Activity")
dim(NewData)
select(NewData, Subject, Activity)
select(NewData, Subject, Activity, Activity Names)
select(NewData, Subject, Activity, ActivityNames)
NewData
names(NewData)
gsub("^t", "time"< names(NewData))
gsub("^t", "time", names(NewData))
names(NewData) <- gsub("^t", "time", names(NewData))
##f = frequency; substitute all colnames to read frequency
names(NewData) <- gsub("^f", "frequency", names(NewData))
##Acc = Acceleration / Mag = Magnitude / BodyBody = Body / Gyro = Gyroscope; update all
names(NewData) <- gsub("Acc", "Acceleration", names(NewData))
names(NewData) <- gsub("BodyBody", "Body", names(NewData))
names(NewData) <- gsub("Mag", "Magnitude", names(NewData))
names(NewData) <- gsub("Gyro", "Gyroscope", names(NewData))
names(NewData)
Grouped <- group_by(NewData, Subject, ActivityNames)
Grouped
summarise(Grouped)
mutate_each(Grouped, funs(mean))
Grouped1 <- mutate_each(Grouped, funs(mean))
Grouped2 <- ungroup(Grouped1)
Grouped2
Grouped3 <- distinct(Grouped2)
Grouped3
dim(Grouped3)
TidyData %>% group_by(NewData, Subject, ActivityNames) %>% mutate(NewData, funs(mean)) %>% ungroup %>% distinct
TidyData <- NewData %>% group_by(NewData, Subject, ActivityNames) %>% mutate(NewData, funs(mean)) %>% ungroup %>% distinct
TidyData <- NewData %>% group_by(Subject, ActivityNames) %>% mutate(funs(mean)) %>% ungroup %>% distinct
TidyData <- distinct(Grouped2)
TidyData
dim(TidyData)
write.table(TidyData, file="tidydata.txt", row.name=FALSE)
write.csv(TidyData, file="tidydata.csv")
write.csv(NewData, file="newdata.csv")
Variables <- names(NewData)
Variables
write.table(Variables, "Variables.txt", row.name=FALSE)
Grouped <- group_by(NewData, Subject, ActivityNames)
Grouped
