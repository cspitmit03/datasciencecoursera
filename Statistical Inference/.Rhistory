Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
plot1 <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
plot(plot1)
barplot(plot1)
barplot(plot1[1:10,2])
str(plot1)
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
par(mfrow = c(2, 1))
barplot(fatalorder[1:10, 2], col = rainbow(10), legend.text = fatalorder[1:10,
1], ylab = "Fatality", main = "10 natural events cause most fatality")
barplot(fatalorder$EVTYPE, fatalorder$fatalsum)
summary(fatalorder)
xyplot(fatalorder$EVTYPE, fatalorder$fatalsum)
library(ggplot2)
library(lattice)
xyplot(fatalorder$EVTYPE, fatalorder$fatalsum)
barplot(fatalorder$EVTYPE, fatalorder$fatalsum)
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder <- data.frame(fatalorder)
par(mfrow = c(2, 1))
barplot(fatalorder[1:10, 2], col = rainbow(10), legend.text = fatalorder[1:10,
1], ylab = "Fatality", main = "10 natural events cause most fatality")
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
injorder <- Grouped4 %>% select(EVTYPE, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
totorder <- Grouped4 %>% select(EVTYPE, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder <- Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder
Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
injorder <- Grouped4 %>% mutate(inj = "injury") %>% select(EVTYPE, injury, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
colnames(injorder) <- c("EVTYPE", "category", "sum")
totorder <- Grouped4 %>% mutate(tot = "total") %>% select(EVTYPE, tot, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
colnames(totorder) <- c("EVTYPE", "category", "sum")
Grouped4
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
injorder <- Grouped4 %>% mutate(inj = "injury") %>% select(EVTYPE, inj, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
colnames(injorder) <- c("EVTYPE", "category", "sum")
totorder <- Grouped4 %>% mutate(tot = "total") %>% select(EVTYPE, tot, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
colnames(totorder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(fatalorder, injorder, totorder)
stracked
stacked
barchart(sum~EVTYPE, data = stacked, grouped = category)
stacked1 <- data.frame(stacked)
barchart(sum~EVTYPE, data = stacked1, grouped = category)
barchart(sum~EVTYPE, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category, auto.key = TRUE)
barchart(sum~EVTYPE, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = TRUE)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
totalorder
totorder
fatorder
fatalorder
totorder
fatalorder
injorder
Grouped4
Grouped3
Grouped2
Grouped2 %>% mutate(propsum = sum(prop), cropsum = sum(crop)) %>% select(EVTYPE, propsum, cropsum)
Grouped2 %>% select(EVTYPE, propsum, cropsum) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
proporder
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
croporder <- damage %>% mutate(cropcat = "crop") %>% select(EVTYPE, cropcat, cropsum) %>% arrange(desc(cropsum)) %>% head(n=10)
colnames(croporder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(proporder, croporder)
stacked <- rbind(fatalorder, injorder, totorder)
damagestack <- rbind(proporder, croporder)
damagestack
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years \n in Millions of US Dollars", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
```{r, echo=TRUE}
library(dplyr)
library(curl)
library(qdap)
#download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url,destfile="./Data.csv.bz2",method="curl", quiet=TRUE)
data <- read.csv(bzfile("Data.csv.bz2"))
datadf <- tbl_df(data)
```
data(sleep)
head(sleep)
dim(sleep)
library(datasets)
data(ChickWeight)
dim(ChickWeight)
ChickWeight
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
mn <- 1100
sd <- 30
n <- 9
mn + c(-1,1) * qt(.95,n-1)*sd/sqrt(n)
getwd()
list.files()
setwd("Statistical Inference")
list.files()
l <- 0.2 #lambda
mn <- 1/l #mean
store <- data.frame()
n <- 40
for(i=1:1000){
set.seed(i)
store[i] <- rexp(n, l)
}
for(i in 1:1000){
set.seed(i)
store[i] <- rexp(n, l)
}
l <- 0.2 #lambda
mn <- 1/l #mean
store <- data.frame()
n <- 40
i <- 1
set.seed(1)
store[,1] <- rexp(n,l)
store
store[,1]
rexp(n,l)
a <- rexp(n,l)
str(a)
store[,1] <- a
store <- data.frame(nrow=40)
store
data.frame(matrix(nrow=40))
l <- 0.2 #lambda
mn <- 1/l #mean
store <- data.frame(matrix(nrow=40))
n <- 40
i <- 1
set.seed(1)
store[,1] <- rexp(n,l)
store
l <- 0.2 #lambda
mn <- 1/l #mean
store <- data.frame(matrix(nrow=40))
n <- 40
for(i in 1:1000){
set.seed(i)
store[i] <- rexp(n, l)
}
dim(store)
store
library(dplyr)
sims <- tbl_df(store)
sims
mutate_each(sims, funs(mean))
replicate(1000, rexp(n,l))
#PART 1
#Compare exponential distribution to CLT
#lambda = 0.2 for all simulations
set.seed(1)     #seed for reproducibility
l <- 0.2        #lambda
mn <- 1/l       #mean
n <- 40         #sample size
sim <- 1000     #simulations
#store simulations
store_rexp <- replicate(sim, rexp(n,l))
#calculate mean
mean_rexp <- apply(store_rexp, 2, mean)
mean(mean_rexp)
#calculate variance
var_rexp <- apply(store_rexp, 2, var)
#compare theory to simulations
sim_var <- var(var_rexp)
theory_var <- 1/(l^2)
print(sim_var)
print(theory_var)
var_rexp
mean(var_rexp)
```{r, echo=TRUE}
#calculate variance
var_rexp <- apply(store_rexp, 2, var)
#compare theory to simulations
sim_var <- mean(var_rexp)
theory_var <- 1/(l^2)
print(sim_var)
print(theory_var)
```
print(sim_mean)
print(theory_mean)
hist(sim_mean, main="Exponential Simulations")
sim_mean <- mean(mean_rexp)
theory_mean <- 1/l
print(sim_mean)
print(theory_mean)
hist(mean_rexp, main="Exponential Simulations")
```
hist(mean_rexp, main="Exponential Simulations")
abline(v=sim_mean)
```
hist(mean_rexp, main="Exponential Simulations")
abline(v=sim_mean, col = "blue", title="sim")
hist(mean_rexp, main="Exponential Simulations", break=10)
abline(v=sim_mean, col = "blue")
hist(mean_rexp, main="Exponential Simulations", breaks=10)
abline(v=sim_mean, col = "blue")
#plot results
hist(mean_rexp, main="Exponential Simulations", breaks=10)
abline(v=sim_mean, col = "blue")
```
#plot results
hist(mean_rexp, main="Exponential Simulations (10 Breaks)", breaks=10)
abline(v=sim_mean, col = "blue")
```
#calculate variance
var_rexp <- apply(store_rexp, 2, var)
#compare theory to simulations
sim_var <- mean(var_rexp)
theory_var <- 1/(l^2)
print(sim_var)
print(theory_var)
```
1/l/sqrt(n)
mean_rexp
var(mean_rexp)
(1/l/sqrt(n))^2
```{r, echo=TRUE}
#compare variance of theory to simulations
sim_var <- var(mean_rexp)
theory_var <- (1/l/sqrt(n))^2
print(sim_var)
print(theory_var)
```
mean_rexp
#plot results
hist(mean_rexp, main="Exponential Simulations (100 Breaks)", breaks=100)
abline(v=sim_mean, col = "blue")
hist(mean_rexp, main="Exponential Simulations (25 Breaks)", breaks=25)
abline(v=sim_mean, col = "blue")
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
abline(v=sim_mean, col = "blue")
ggplot(stat_function(fun=dnorm, arg = list(mean=5)))
library(ggplot2)
ggplot(stat_function(fun=dnorm, arg = list(mean=5)))
ggplot(stat_function(fun=dnorm, arg = list(mean=5, sd = 5)))
ggplot(stat_function(fun = dnorm, arg = list(mean = 5,
sd = 5))
ggplot(stat_function(fun = dnorm, arg = list(mean = 5,
sd = 5)))
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
a <- abline(v=sim_mean, col = "blue")
print(a)
a
print(a)
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
print(a)
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
a <- abline(v=sim_mean, col = "blue")
plot(a)
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25) + abline(v=sim_mean, col = "blue")
plot(a)
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
abline(v=sim_mean, col = "blue")
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
a + stat_function(fun = dnorm, color = "red")
a <- hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
stat_function(fun = dnorm, color = "red")
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
curve(dnorm(x, mean=5, sd=5), col="red", lwd=2)
curve(dnorm(x, mean=5, sd=5), col="red", lwd=2)
curve(dnorm(mean=5, sd=5), col="red", lwd=2)
x
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
curve(dnorm(x, mean=5, sd=5), col="red", lwd=2)
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
head(mean_rexp)
ggplot(geom_histogram(mean_rexp, aes(x=[,1])))
ggplot(geom_histogram(mean_rexp, aes(x=mean_rexp[,1])))
seq(min(mean_rexp), max(mean_rexp), length = 100)
dim(mean_rexp)
mean_rexp
seq(min(mean_rexp), max(mean_rexp), length = 1000)
dnorm(xfit, mean = 1/l, sd = (1/l/sqrt(n)))
xfit <- seq(min(mean_rexp), max(mean_rexp), length = 1000)
yfit <- dnorm(xfit, mean = 1/l, sd = (1/l/sqrt(n)))
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
abline(v=sim_mean, col = "blue")
lines(xfit, yfit, col="red")
xfit <- seq(min(mean_rexp), max(mean_rexp), length = 100)
yfit <- dnorm(xfit, mean = 1/l, sd = (1/l/sqrt(n)))
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=25)
abline(v=sim_mean, col = "blue")
lines(xfit, yfit, col="red")
xfit <- seq(min(mean_rexp), max(mean_rexp), length = 100)
yfit <- dnorm(xfit, mean = 1/l, sd = (1/l/sqrt(n)))
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=n)
abline(v=sim_mean, col = "blue")
lines(xfit, yfit, col="red", lty=5)
mean
1/l
1/l/sqrt(n)
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=n, prob=T)
xfit <- seq(min(mean_rexp), max(mean_rexp), length = 100)
yfit <- dnorm(xfit, mean = 1/l, sd = (1/l/sqrt(n)))
hist(mean_rexp, col = "gray", main="Exponential Simulations (25 Breaks)", breaks=n, prob=T)
abline(v=sim_mean, col = "blue")
lines(xfit, yfit, col="red", lty=5)
lines(xfit, yfit, col="red", lty=5, lwt=10)
lines(xfit, yfit, col="red", lty=5, lwd=10)
install.packages("pdflatex")
library(datasets)
library(data)
library(dataset)
library(datasets)
ToothGrow
data(ToothGrow)
dataset(ToothGrow)
data(ToothGrowth)
head(ToothGrowth)
Tooth <- data(ToothGrowth)
Tooth
ToothGrowth
dim(ToothGrowth)
Tooth <- tbl_df(ToothGrowth)
Tooth
str(Tooth)
covar(Tooth)
cor(Tooth)
xyplot(len ~ dose | supp)
library(lattice)
xyplot(len ~ dose | supp)
Tooth
xyplot(len ~ dose | supp, Tooth)
boxplot(len ~ dose | supp, Tooth)
plot(len ~ dose | supp, Tooth)
xyplot(len ~ supp | dose, Tooth)
plot(dose ~ length | supp, Tooth)
plot(length ~ len | supp, Tooth)
xyplot(dose ~ length | supp, Tooth)
xyplot(length ~ dose | supp, Tooth)
xyplot(len ~ dose | supp, Tooth)
abline(lm(len~dose))
abline(lm(len~dose, Tooth))
xyplot(len ~ dose, Tooth)
xyplot(len ~ dose, Tooth, Groups = supp)
xyplot(len ~ dose, Tooth, group = supp)
library(lme4)
fits <- lmList(len ~ dose | supp, Tooth)
fits
abline(fits)
fits$OJ
abline(fits$OJ)
qplot
qplot(dose, len, colour=supp, data=Tooth)
qplot(dose, len, colour=supp, data=Tooth) + geom_abline(fits$OJ[1], slope=fits$OJ[2])
fits
fits$OJ
fits$OJ[1]
fits$OJ[2]
fits$OJ.dose
coef(fits$OJ)
coef(fits$OJ[1])
coef(fits$OJ[2])
coef(fits[1])
coef(fits)[1]
coef(fits)[1,1]
fits
qplot(dose, len, colour=supp, data=Tooth) + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2])
qplot(dose, len, colour=supp, data=Tooth) + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red")
qplot(dose, len, colour=supp, data=Tooth) + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red") + geom_abline(intercept=coef(fits)[2,1], slope=coef(fits)[2,2], color="turquoise")
qplot(dose, len, colour=supp, data=Tooth) + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red") + geom_abline(intercept=coef(fits)[2,1], slope=coef(fits)[2,2], color="blue")+theme_bw()
lmList(formula = len ~ dose | supp, data = Tooth)
summary(fits)
summary(Tooth)
qplot(dose, len, colour=supp, data=Tooth, main="Tooth Growth vs. Calcium Dosage from either natural or supplement sources") + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red") + geom_abline(intercept=coef(fits)[2,1], slope=coef(fits)[2,2], color="blue")+theme_bw()
qplot(dose, len, colour=supp, data=Tooth, main="Figure 1. Tooth Growth vs. Calcium Dosage from Either Natural or Supplement Sources") + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red") + geom_abline(intercept=coef(fits)[2,1], slope=coef(fits)[2,2], color="blue")+theme_bw()
```
qplot(dose, len, colour=supp, data=Tooth, main="Figure 1. Tooth Growth vs. Calcium Dosage from Either Natural or Supplement Sources", ylab="Tooth Length", xlab = "Dosage (mg)") + geom_abline(intercept=coef(fits)[1,1], slope=coef(fits)[1,2], color="red") + geom_abline(intercept=coef(fits)[2,1], slope=coef(fits)[2,2], color="blue")+theme_bw()
fits
summary(fits)
summary(Tooth)
Tooth %>% group_by(supp) %>% summarise(mean(len))
Tooth %>% group_by(supp, dose) %>% summarise(mean(len))
Tooth %>% group_by(supp) %>% summarise(mean = mean(len), sd = sd(len), var = var(len))
Tooth %>% group_by(supp) %>% summarise(mean = mean(len), sd = sd(len), var = var(len)) %>% mutate_each(funs(round))
Tooth %>% group_by(supp) %>% summarise(mean = mean(len), sd = sd(len), var = var(len))
Supp <- Tooth %>% group_by(supp) %>% summarise(mean = mean(len), sd = sd(len), var = var(len))
SuppDose <- Tooth %>% group_by(supp, dose) %>% summarise(mean = mean(len), sd = sd(len), var = var(len))
Supp
SuppDose
data(father.son)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
father.son
dim(father.son)
fs <- tbl_df(father.son)
fs
ChickWeight
head(ChickWeight)
wideCW
head(wideCW)
Tooth
dcast(Tooth, dose ~ supp, value.var="len")
dcast(Tooth, dose ~ supp)
ttest(len ~ supp, paired=F, var.equal=F, data = Tooth)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth)
Tooth
Tooth %>% select(dose == 0.5|1.0)
Tooth %>% select(dose %in% 0.5|1.0)
Tooth %>% select(dose %in% c(0.5, 1.0))
Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth %>% filter(dose == 0.5|1.0)
Tooth
Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0510 <- Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0520 <- Tooth %>% filter(dose %in% c(0.5, 2.0))
Tooth_1020 <- Tooth %>% filter(dose %in% c(2.0, 1.0))
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth_0510)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth_0520)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth_1020)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth)
subset(Tooth, dose %in% c(0.5, 1.0))
Tooth_0510
Tooth_0510 <- Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0520 <- Tooth %>% filter(dose %in% c(0.5, 2.0))
Tooth_1020 <- Tooth %>% filter(dose %in% c(2.0, 1.0))
t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0510)
t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0520)
t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_1020)
Tooth_0510 <- Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0520 <- Tooth %>% filter(dose %in% c(0.5, 2.0))
Tooth_1020 <- Tooth %>% filter(dose %in% c(2.0, 1.0))
a <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0510)
b <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0520)
c <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_1020)
str(a)
a$conf.int
a$conf.int[1]
a$conf.int
d<- a$conf.int
d
d[1]
d[2]
d[3]
d[4]
d[1,1]
rbind(d, b$conf.int)
d
d<-rbind(d,b$conf.int)
d
d<-rbind(d,c$conf.int)
d
d<- cbind(c("Tooth_0510",a$conf.int))
d
d<- cbind(d, c("Tooth_0520",b$conf.int))
d
Tooth_0510 <- Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0520 <- Tooth %>% filter(dose %in% c(0.5, 2.0))
Tooth_1020 <- Tooth %>% filter(dose %in% c(2.0, 1.0))
a <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0510)
b <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0520)
c <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_1020)
d<- cbind(c("Tooth_0510",a$conf.int))
d<- cbind(d, c("Tooth_0520",b$conf.int))
d<- cbind(d, c("Tooth_1020",c$conf.int))
d<- cbind(c("Tooth_0510",a$conf.int))
d
Tooth_0510 <- Tooth %>% filter(dose %in% c(0.5, 1.0))
Tooth_0520 <- Tooth %>% filter(dose %in% c(0.5, 2.0))
Tooth_1020 <- Tooth %>% filter(dose %in% c(2.0, 1.0))
a <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0510)
b <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_0520)
c <- t.test(len ~ dose, paired=F, var.equal=F, data = Tooth_1020)
d<- cbind(c("Tooth_0510",a$conf.int))
d
d<- cbind(d, c("Tooth_0520",b$conf.int))
d
d <- cbind(d, c("Tooth_1020",c$conf.int))
d
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.9)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.9)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.99)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.925)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.93)
t.test(len ~ supp, paired=F, var.equal=F, data = Tooth, conf.level=0.94)
