Grouped4
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
injorder <- Grouped4 %>% mutate(inj = "injury") %>% select(EVTYPE, inj, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
colnames(injorder) <- c("EVTYPE", "category", "sum")
totorder <- Grouped4 %>% mutate(tot = "total") %>% select(EVTYPE, tot, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
colnames(totorder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(fatalorder, injorder, totorder)
stracked
stacked
barchart(sum~EVTYPE, data = stacked, grouped = category)
stacked1 <- data.frame(stacked)
barchart(sum~EVTYPE, data = stacked1, grouped = category)
barchart(sum~EVTYPE, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category, auto.key = TRUE)
barchart(sum~EVTYPE, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = TRUE)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
totalorder
totorder
fatorder
fatalorder
totorder
fatalorder
injorder
Grouped4
Grouped3
Grouped2
Grouped2 %>% mutate(propsum = sum(prop), cropsum = sum(crop)) %>% select(EVTYPE, propsum, cropsum)
Grouped2 %>% select(EVTYPE, propsum, cropsum) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
proporder
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
croporder <- damage %>% mutate(cropcat = "crop") %>% select(EVTYPE, cropcat, cropsum) %>% arrange(desc(cropsum)) %>% head(n=10)
colnames(croporder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(proporder, croporder)
stacked <- rbind(fatalorder, injorder, totorder)
damagestack <- rbind(proporder, croporder)
damagestack
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years \n in Millions of US Dollars", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
```{r, echo=TRUE}
library(dplyr)
library(curl)
library(qdap)
#download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url,destfile="./Data.csv.bz2",method="curl", quiet=TRUE)
data <- read.csv(bzfile("Data.csv.bz2"))
datadf <- tbl_df(data)
```
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
library(datasets)
summary(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
x/mean(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
swirl()
library("swirl")
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(1/(n-2)*sum((fit$residuals)^2))
sqrt(1/(n-2)*sum(fit$residuals^2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit$sigma)
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sum(fit$residuals^2)
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
getwd()
list.files()
cd Regression Model
setwd("Regression Model")
getwd()
list.files()
list.files()
lyfe <- read.xlsx("LyfeStart.xlsx")
library("xlsx")
lyfe <- read.xlsx("LyfeStart.xlsx")
lyfe <- read.xlsx("LyfeStart.xlsx", 1)
list.files()
lyfe <- read.xlsx("RDataforOrders.xlsx", 1)
summary(lyfe)
plot(lyfe$TotalSum)
library("caret")
folds <- createTimeSlices(y=lyfe$OrderDate, initialWindow=20, horizon=10)
folds <- createTimeSlices(y=lyfe, initialWindow=20, horizon=10)
set.seed(10)
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7, list=FALSE)
training <- lyfe[inTrain]
test <- lyfe[-inTrain]
dim(inTrain)
dim(lyfe)
summary(lyfe)
summary(inTrain)
summary(training)
lyfe[inTrain]
lyfe
lyfe[inTrain]
dim(lyfe[inTrain])
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7)
inTrain
lyfe[inTrain]
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7, list=FALSE)
inTrain
lyfe
lyfe[inTrain]
training <- lyfe[inTrain]
dim(training)
training
featurePlot(x=training, y=training$TotalSum, plot="pairs")
training$TotalSum
training
training <- lyfe[inTrain,]
training
testing <- lyfe[-inTrain,]
featurePlot(x=training, y=training$TotalSum, plot="pairs")
qplot(CountNew, TotalSum, data = training)
lm(TotalSum ~.)
lm(TotalSum ~., training)
fit <- lm(TotalSum ~., training)
summary(fit)
plot(training$TotalSum)
library(datasets)
library(ggplot2)
library(caret)
library(dplyr)
cars <- data.frame(mtcars)
summary(cars)
cars <- df(mtcars)
cars <- data.frame(mtcars)
cars
mtcars
cars <- data.frame(mtcars)
pairs(cars)
pairs(mtcars)
boxplot(mpg~am, data=mtcars)
boxplot(mpg~jitter(am), data=mtcars)
boxplot(mpg~am, data=mtcars)
boxplot(mpg~am, data=mtcars, names=c("Automatic", "Manual"))
ggplot(mtcars, aes(am, mpg))
ggplot(mtcars, aes(am, mpg))+geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)), size=2)
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)")
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)")+main("comparison")
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)")+main("comparison") + ggtitle("Exploration between Transmission and MPG")
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)") + ggtitle("Exploration between Transmission and MPG")
boxplot(mpg~am, data=mtcars, names=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)") + ggtitle("Exploration between Transmission and MPG")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)") + ggtitle("Exploration between Transmission and MPG")
boxplot(mpg~am, data=mtcars, names=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)") + ggtitle("Exploration between Transmission and MPG")
cars <- data.frame(mtcars)
pairs(mtcars)
simple <- lm(mpg~am, cars)
summary(simple)
plot(simple)
plot(simple)
all <- lm(mpg~., cars)
summary(all)
least <- step(all, direction="both")
t.test(mpg ~ am, data = mtcars)
step(all, direction="backward")
all <- lm(mpg~., cars)
summary(all)
step(all, direction="backward")
cars <- mtcars
cars
cars <- mtcars
cars$cyl  <- factor(cars$cyl)
cars$vs   <- factor(cars$vs)
cars$gear <- factor(cars$gear)
cars$carb <- factor(cars$carb)
cars$am <- factor(cars$am, labels=c("Auto","Man"))
simple <- lm(mpg~am, cars)
all <- lm(mpg~., cars)
least <- step(all, direction="backward")
plot(all)
plot(least)
polycor(cars)
library(polycor)
install.packages("polycor")
library(polycor)
polycor(cars)
hetcor(cars)
plot(cars$mpg, least.res)
least
least$res
resid(least)
plot(cars$mpg, least$resid)
abline(least)
least
least$resid
abline(least)
summary(least)
t.test(mpg ~ am + cyl + hp+ wt, data = mtcars)
t.test(mpg ~ ., data = mtcars)
t.test(mpg ~ cyl, data = mtcars)
t.test(mpg ~ vs, data = mtcars)
t.test(am ~ mpg, data = mtcars)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars, mu=0)
t.test(mpg ~ am, data = mtcars, mu=0, alpha=.8)
t.test(mpg ~ am, data = mtcars)
confint(least)
confint(simple)
plotcorr()
library(ellipse)
plotcorr()
plotcorr(mtcars)
ctab <- cor(mtcars)
plotcorr(ctab)
colorfun <- colorRamp(c("#CC0000","white","#3366CC"), space="Lab")
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255),
mar = c(0.1, 0.1, 0.1, 0.1))
pairs(cars)
plot(mpg~hp, mtcars)
pairs(cars)
colorfun <- colorRamp(c("#CC0000","white","#3366CC"), space="Lab")
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255),
mar = c(0.1, 0.1, 0.1, 0.1))
plot(cyl~mpg)
plot(cyl~mpg, mtcars)
colorfun <- colorRamp(c("#CC0000","white","#3366CC"), space="Lab")
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255),
mar = c(0.1, 0.1, 0.1, 0.1))
pairs(cars[,c(1,2,4,6,9)])
ctab <- cor(cars)
cor(cars)
cor(mtcars)
cars
summary(cars)
cor(cars)
ctab <- cor(mtcars)
colorfun <- colorRamp(c("#CC0000","white","#3366CC"), space="Lab")
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255), mar = c(0.1, 0.1, 0.1, 0.1))
pairs(cars[,c(1,2,4,6,9)])
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255), mar = c(0.1, 0.1, 0.1, 0.1))
summary(least)
final <- lm(mpg ~ hp+wt+am, cars)
summary(final)
final <- lm(mpg ~ hp+wt, cars)
summary(final)
scale(mtcars)
final
plot(final)
plot(final$resid)
plot(final$fitted, final$resid)
final$interval
confint(final, level=0.95)
dim(mtcars)
summary(mtcars)
summary(cars)
library(ellipse)
ctab <- cor(mtcars)
colorfun <- colorRamp(c("#CC0000","white","#3366CC"), space="Lab")
plotcorr(ctab, col=rgb(colorfun((ctab+1)/2), maxColorValue=255), mar = c(0.1, 0.1, 0.1, 0.1))
ggplot(mtcars, aes(factor(am), mpg))+geom_boxplot()+geom_point(aes(color=factor(am)))+scale_x_discrete(labels=c("Automatic","Manual"))+xlab("Transmission (am)") + ylab("Miles per Gallon (mpg)") + ggtitle("Exploration between Transmission and MPG")
ttest <- t.test(mpg~am, data=cars)
ttest$p.value
ctab
ctab$mpg
ctab[,1]
simple <- lm(mpg~am, cars)
summary(simple)
simple$adj.r.squared
summary(simple)$adj.r.squared
all <- lm(mpg~., cars)
least <- step(all, direction="backward")
least
summary(least)
summary(simple)
final <- lm(mpg ~ hp+wt, cars)
summary(simple)
summary(final)
summary(least)
summary(final)$adj.r.squared
summary(simple)
summary(least)
plot(final$fitted, final$resid)
par(mfrow= c(2,2))
plot(final)
summary(least)$adj.r.squared
summary(least)$adj.r.squared
mean(cars)
mean(cars$am)
mean(mtcars$am)
light <- data.frame(mtcars)
colmean(mtcars)
colmeans(mtcars)
library(dplyr)
colmeans(mtcars)
mean(mtcards$am[am==0])
mean(mtcars$am[am==0])
mtcars$am
mtcars[am==0]$am
mtcars[am==0]
mtcars[am=0]
mtcars(am==0)
mtcars
mtcars(am=0)
mtcars[am=0]
getwd()
setwd("/Users/cesarespitia/Documents/datasciencecoursera/Practical Machine Learning")
getwd()
list.files()
head(myTraining)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
myTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
head(myTrain)
head(training)
head(myTraining)
na_test = sapply(myTraining, function(x) {sum(is.na(x))})
na_test
table(na_test)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
na_test = sapply(myTraining, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test!=0])
myTraining = myTraining[, !names(myTraining) %in% bad_columns]
str(training)
table(na_test)
myTraining = myTraining[, !names(myTraining) %in% bad_columns]
str(training)
na_test
names(na_test[na_test==0])
bad_columns = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% bad_columns]
str(training)
bad_columns
names(myTraining)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
na_test = sapply(myTraining, function(x) {sum(is.na(x))})
table(na_test)
noNAs = names(na_test[na_test==0])
myTraining[, names(myTraining) %in% noNAs]
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
summary(myTraining)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
summary(myTraining)
dim(myTraining); dim(myTesting)
1313462/13737
13462/13737
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
dim(myTraining)
myTraining <- training[,8:60]
dim(myTraining)
str(myTraining)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
myTraining <- training[,8:60]
dim(myTraining)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
myTraining <- myTraining[,8:60]
dim(myTraining)
set.seed(10)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
myTraining <- myTraining[,8:60]
dim(myTraining)
modelRF <- randomForest(classe~., data=myTraining)
library(caret, warn.conflicts = FALSE); library(ggplot2, warn.conflicts = FALSE); library(randomForest, warn.conflicts = FALSE); library(dplyr, warn.conflicts = FALSE); library(rattle, warn.conflicts = FALSE)
modelRF <- randomForest(classe~., data=myTraining)
noNAs = names(na_test[na_test==0])
myTesting = myTesting[, names(myTesting) %in% noNAs]
myTesting <- myTesting[,8:60]
dim(myTesting)
dim(myTraining)
predictRF <- predict(modelRF, myTesting, type = "class")
predictRF
confusionMatrix(predictRF, myTraining$classe)
confusionMatrix(predictRF, myTesting$classe)
modelDT <- rpart(classe~., data=myTraining, method="class")
library(rpart, warn.conflicts = FALSE)
modelDT <- rpart(classe~., data=myTraining, method="class")
fancyRpartPlot(modelDT)
predictDT <- predict(modelDT, myTesting, type = "class")
confusionMatrix(predictDT, myTesting$classe)
predictSubmission <- predict(modelRF, testing, type="class")
confusionMatrix(predictSubmission, testing$classe)
dim(predictSubmission)
predictSubmission
dim(testing)
noNAs = names(na_test[na_test==0])
testing = testing[, names(testing) %in% noNAs]
testing <- testing[,8:60]
dim(testing)
dim(myTesting)
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
head(testing)
na_test = sapply(myTraining, function(x) {sum(is.na(x))})
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
myTraining <- myTraining[,8:60]
dim(myTraining)
set.seed(10)
myTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
myTraining <- training[myTrain, ]; myTesting <- training[-myTrain, ]
dim(myTraining); dim(myTesting)
na_test = sapply(myTraining, function(x) {sum(is.na(x))})
noNAs = names(na_test[na_test==0])
myTraining = myTraining[, names(myTraining) %in% noNAs]
str(myTraining)
myTraining <- myTraining[,8:60]
dim(myTraining)
noNAs = names(na_test[na_test==0])
myTesting = myTesting[, names(myTesting) %in% noNAs]
myTesting <- myTesting[,8:60]
dim(myTesting)
noNAs = names(na_test[na_test==0])
testing = testing[, names(testing) %in% noNAs]
testing
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
testing
noNAs
summary(testing)
confusionMatrix(predictDT, myTesting$classe)
predictSubmission <- predict(modelRF, testing, type="class")
predictSubmission
modelRF <- randomForest(classe~., data=myTraining)
predictRF <- predict(modelRF, myTesting, type = "class")
confusionMatrix(predictRF, myTesting$classe)
predictSubmission <- predict(modelRF, testing, type="class")
predictSubmission
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictSubmission)
getwd()
setwd("/Users/cesarespitia/Documents/datasciencecoursera/Practical Machine Learning/submission")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictSubmission)
predictSubmission
