}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
teamginger <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teamginger
hashtag <- "teampearl"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/search?q=',hashtag,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
df = data.frame()
df = data.frame(no = 1:length(media$data))
store <- data.frame()
tagname <- received_profile$name
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/tags/',tagname,'/media/recent/?access_token=',token,sep="")))
datetest <- Sys.time()
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
teampearl <- mPlot(x = "date", y = c("likes", "comments"), type = "Line", data = store)
teampearl
media$pagination
store
datetest
backintime
isTRUE(datetest < as.POSIXct(backintime)
isTRUE(datetest < as.POSIXct(backintime))
while(isTRUE(datetest < as.POSIXct(backintime)) == "FALSE"){
for(i in 1:length(media$data)){
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes
df$likes[i] <- media$data[[i]]$likes$count
#datestring
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
#datetrue
df$datetrue[i] <- as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01")
datetest <- min(df$date)
#pagination
if(i==1){
newstream <- media$pagination$next_url
}
}
media <- fromJSON(getURL(paste(newstream,sep="")))
store <- rbind(store,df)
}
library(dplyr)
library(curl)
library(qdap)
#download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url,destfile="./Data.csv.bz2",method="curl")
data <- read.csv(bzfile("Data.csv.bz2"))
datadf <- tbl_df(data)
dim(datadf)
```
sum(is.na(Grouped))
dim(datadf)
sum(is.na(datadf))
dim(datadf)
Grouped <- datadf
Grouped$EVTYPE <- toupper(Grouped$EVTYPE)
mod <- Grouped$EVTYPE[grep("BEACH|COAST", Grouped$EVTYPE)]
Grouped$EVTYPE <- mgsub(mod, "COAST", Grouped$EVTYPE)
```{r, cache=TRUE}
##event type manipulation
Grouped <- datadf
Grouped$EVTYPE <- toupper(Grouped$EVTYPE)
mod <- Grouped$EVTYPE[grep("BEACH|COAST", Grouped$EVTYPE)]
Grouped$EVTYPE <- mgsub(mod, "COAST", Grouped$EVTYPE)
mod <- Grouped$EVTYPE[grep("FLASH|FLOOD&!(BEACH|COAST)", Grouped$EVTYPE)]
Grouped$EVTYPE <- mgsub(mod, "FLOOD", Grouped$EVTYPE)
Grouped$EVTYPE
Grouped$EVTYPE[grep("FLASH|FLOOD&!(BEACH|COAST)", Grouped$EVTYPE)]
Grouped$EVTYPE[grep("BEACH|COAST", Grouped$EVTYPE)]
val <- c(3,6,9,6,0,0,0,1,1,0)
val2 <- c("K","M","B","m","+","?","-","h","H"," ")
mgsub("K", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- mgsub(val, val2, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP
val
val2
multigsub(val, val2, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub(val, val2, Grouped$PROPDMGEXP)
distinct(Grouped$PROPDMGEXP)
count(Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, DEATHS, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped
Grouped1 <- group_by(Grouped, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped1
Fatalities <- Grouped1 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Grouped1 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Fatalities <- Grouped1 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
FATALITIES
Fatalities
Grouped1
Grouped1 %>% summarise(fatalsum=sum(FATALITIES))
Grouped1 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum)
Grouped1 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Fatalities <- Grouped1 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
dim(Grouped1)
val <- c(3,6,9,6,0,0,0,1,1,0)
val2 <- c("K","M","B","m","+","?","-","h","H"," ")
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
dim(Grouped)
Grouped$PROPDMGEXP <- multigsub(val, val2, Grouped$PROPDMGEXP)
Grouped
multigsub("K", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub("K|k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub("M|m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub("B|b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub("+|?|-", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub(" ", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- multigsub("h|H", 1, Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("K|k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("M|m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("B|b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("+|?|-", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub(" ", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("h|H", 1, Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^K|^k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^M|^m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^B|^b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^+|^?|^-", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub(" ", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^h|^H", 1, Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^K|^k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^M|^m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^B|^b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^+|^?|^-", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^\\s", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^h|^H", 1, Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^K|^k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^M|^m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^B|^b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^+|^?|^-", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^h|^H", 1, Grouped$PROPDMGEXP)
Grouped
Grouped <- select(datadf, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^K|^k", 3, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^M|^m", 6, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("^B|^b", 9, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("[:punct:]", 1, Grouped$PROPDMGEXP)
Grouped$PROPDMGEXP <- gsub("[:space:]", 1, Grouped$PROPDMGEXP)
Grouped
tail(Grouped)
Grouped$PROPDMGEXP == " "
sum(Grouped$PROPDMGEXP == " ")
distinct(Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP
Grouped$CROPDMGEXP <- gsub("^K|^k", 3, Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP <- gsub("^M|^m", 6, Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP <- gsub("^B|^b", 9, Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP <- gsub("[:punct:]", 1, Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP <- gsub("[:space:]", 1, Grouped$CROPDMGEXP)
Grouped$CROPDMGEXP
summary(Grouped$CROPDMGEXP)
Grouped %>% mutate(prop = PROPDMG*as.numeric(PROPDMGEXP))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), crop = CROPDMG*10^as.numeric(CROPDMGEXP))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), ifelse(is.na(crop = CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), ifelse(is.na(crop = CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), ifelse(is.na(crop = CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP)))
Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP)))
Grouped1 <- Grouped %>% mutate(prop = PROPDMG*10^as.numeric(PROPDMGEXP), crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP)))
summary(Grouped1)
Grouped1 <- Grouped %>% mutate(prop = ifelse(is.na(PROPDMG*10^as.numeric(PROPDMGEXP)),0,PROPDMG*10^as.numeric(PROPDMGEXP)), crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP)))
summary(Grouped1)
10^6
Grouped1 <- Grouped %>% mutate(prop = ifelse(is.na(PROPDMG*10^as.numeric(PROPDMGEXP)),0,PROPDMG*10^as.numeric(PROPDMGEXP))/10^6, crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))/10^6)
summary(Grouped1)
Grouped2 <- group_by(Grouped1, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
Fatalities <- Grouped2 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Fatalities
arrange(Fatalties, desc(fatalsum))
arrange(Fatalaties, desc(fatalsum))
arrange(Fatalities, desc(fatalsum))
summary(Fatalities)
str(Fatalities)
Grouped1
Grouped1 <- Grouped %>% mutate(prop = ifelse(is.na(PROPDMG*10^as.numeric(PROPDMGEXP)),0,PROPDMG*10^as.numeric(PROPDMGEXP))/10^6, crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))/10^6) %>% select(EVTYPE, FATALITIES, INJURIES, prop, crop)
Grouped1
summarise(sum(crop))
summarise(Grouped1, sum(crop))
summarise(Grouped1, sum(prop))
Grouped2 <- group_by(Grouped1, EVTYPE)
Grouped2
Grouped1 <- Grouped %>% mutate(totalcasualties = FATALITIES + INJURIES, prop = ifelse(is.na(PROPDMG*10^as.numeric(PROPDMGEXP)),0,PROPDMG*10^as.numeric(PROPDMGEXP))/10^6, crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))/10^6) %>% select(EVTYPE, FATALITIES, INJURIES, prop, crop)
Grouped1
Grouped1 <- Grouped %>% mutate(totalcasualties = FATALITIES + INJURIES, prop = ifelse(is.na(PROPDMG*10^as.numeric(PROPDMGEXP)),0,PROPDMG*10^as.numeric(PROPDMGEXP))/10^6, crop = ifelse(is.na(CROPDMG*10^as.numeric(CROPDMGEXP)),0,CROPDMG*10^as.numeric(CROPDMGEXP))/10^6) %>% select(EVTYPE, FATALITIES, INJURIES, totalcasualties, prop, crop)
Grouped1
Fatalities <- Grouped2 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Fatalities
Fatalities <- Grouped2 %>% summarise(fatalsum=sum(FATALITIES)) %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum))
Injuries <- Grouped2 %>% summarise(injsum=sum(INJURIES)) %>% select(EVTYPE, injsum) %>% arrange(desc(injsum))
Casualties <- Grouped2 %>% summarise(totalsum=sum(totalcasualties)) %>% select(EVTYPE, totalsum) %>% arrange(desc(totalsum))
Casualties <- Grouped2 %>% summarise(totalsum=sum(totalcasualties)) %>% select(EVTYPE, totalsum) %>% arrange(desc(totalsum))
Grouped2
Grouped1
Injuries
Fatalities
Injuries
Casualties
Casualties <- Grouped2 %>% summarise(totalsum=sum(totalcasualties)) %>% select(EVTYPE, totalsum) %>% arrange(desc(totalsum))
Grouped2
Grouped2 <- group_by(Grouped1, EVTYPE)
Grouped2
Casualties <- Grouped2 %>% summarise(totalsum=sum(totalcasualties)) %>% select(EVTYPE, totalsum) %>% arrange(desc(totalsum))
Casualties
dim(Grouped2)
Grouped2 %>% summarise(fatalsum = sum(FATALITIES), injsum = sum(INJURIES), totsum=sum(totalcasualties))
Grouped3 <- Grouped2 %>% summarise(fatalsum = sum(FATALITIES), injsum = sum(INJURIES), totsum=sum(totalcasualties)) %>% ungroup()
dim(Grouped3)
Grouped3
arrange(Grouped3, desc(totsum))
Grouped3$EVTYPE <- toupper(Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("BEACH|COAST", Grouped3$EVTYPE)]
Grouped33$EVTYPE <- mgsub(mod, "COAST", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("FLASH|FLOOD&!(BEACH|COAST)", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "FLOOD", Grouped3$EVTYPE)
mod <- Grouped$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "THUNDERSTORM", Grouped3$EVTYPE)
mod <- Grouped$EVTYPE[grep("WIND", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "WIND", Grouped3$EVTYPE)
mod <- Grouped$EVTYPE[grep("SNOW|ICE", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "SNOW", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("HEAT|RECORD HIGH", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "HEAT", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("RAIN", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "RAIN", Grouped3$EVTYPE)
Grouped3 <- Grouped2 %>% summarise(fatalsum = sum(FATALITIES), injsum = sum(INJURIES), totsum=sum(totalcasualties)) %>% ungroup()
Grouped3$EVTYPE <- toupper(Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("BEACH|COAST", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "COAST", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("FLASH|FLOOD&!(BEACH|COAST)", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "FLOOD", Grouped3$EVTYPE)
mod <- Grouped$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "THUNDERSTORM", Grouped3$EVTYPE)
Grouped$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
mod <- Grouped$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
mod
Grouped3$EVTYPE <- mgsub(mod, "THUNDERSTORM", Grouped3$EVTYPE)
str(mod)
mod <- Grouped3$EVTYPE[grep("FLASH|FLOOD&!(BEACH|COAST)", Grouped3$EVTYPE)]
str(mod)
summary(mod)
mod
mod <- Grouped$EVTYPE[grep("WIND", Grouped3$EVTYPE)]
mod
summary(mod)
mod <- Grouped$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "THUNDERSTORM", Grouped3$EVTYPE)
mod
mod <- Grouped3$EVTYPE[grep("THUNDER|TSTM", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "THUNDERSTORM", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("WIND", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "WIND", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("SNOW|ICE", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "SNOW", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("HEAT|RECORD HIGH", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "HEAT", Grouped3$EVTYPE)
mod <- Grouped3$EVTYPE[grep("RAIN", Grouped3$EVTYPE)]
Grouped3$EVTYPE <- mgsub(mod, "RAIN", Grouped3$EVTYPE)
Grouped3
Grouped3 %>% group_by(EVTYPE) %>% summarise(fatalsum = sum(fatalsum), injsum = sum(injsum), totsum=sum(totsum)) %>% ungroup()
Grouped4 <- Grouped3 %>% group_by(EVTYPE) %>% summarise(fatalsum = sum(fatalsum), injsum = sum(injsum), totsum=sum(totsum)) %>% ungroup()
Grouped3 <- Grouped2 %>% summarise(fatalsum = sum(FATALITIES), injsum = sum(INJURIES), totsum=sum(totalcasualties)) %>% ungroup()
Grouped4
Grouped3
arrange(Grouped4, desc(totsum))
sum(is.na(Grouped4))
sum(is.na(Grouped2))
sum(is.na(Grouped1))
counts <- table(Grouped4$fatalsum, Grouped4$injsum, Grouped4$totsum)
barplot(counts)
counts
barplot(Grouped4[1:10],4)
Grouped4[1:10],4
barplot(Grouped4[1:10,4])
Grouped4
plot1 <- select(EVTYPE, fatalsum)
barplot(plot1)
plot1 <- select(Grouped4, EVTYPE, fatalsum)
barplot(plot1)
plot1
Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head()
Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
plot1 <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
plot(plot1)
barplot(plot1)
barplot(plot1[1:10,2])
str(plot1)
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
par(mfrow = c(2, 1))
barplot(fatalorder[1:10, 2], col = rainbow(10), legend.text = fatalorder[1:10,
1], ylab = "Fatality", main = "10 natural events cause most fatality")
barplot(fatalorder$EVTYPE, fatalorder$fatalsum)
summary(fatalorder)
xyplot(fatalorder$EVTYPE, fatalorder$fatalsum)
library(ggplot2)
library(lattice)
xyplot(fatalorder$EVTYPE, fatalorder$fatalsum)
barplot(fatalorder$EVTYPE, fatalorder$fatalsum)
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder <- data.frame(fatalorder)
par(mfrow = c(2, 1))
barplot(fatalorder[1:10, 2], col = rainbow(10), legend.text = fatalorder[1:10,
1], ylab = "Fatality", main = "10 natural events cause most fatality")
fatalorder <- Grouped4 %>% select(EVTYPE, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
injorder <- Grouped4 %>% select(EVTYPE, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
totorder <- Grouped4 %>% select(EVTYPE, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder <- Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
Grouped4 %>% mutate(fatal = "fatal) %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder
Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum)
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
fatalorder
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
fatalorder
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
injorder <- Grouped4 %>% mutate(inj = "injury") %>% select(EVTYPE, injury, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
colnames(injorder) <- c("EVTYPE", "category", "sum")
totorder <- Grouped4 %>% mutate(tot = "total") %>% select(EVTYPE, tot, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
colnames(totorder) <- c("EVTYPE", "category", "sum")
Grouped4
fatalorder <- Grouped4 %>% mutate(fatal = "fatal") %>% select(EVTYPE, fatal, fatalsum) %>% arrange(desc(fatalsum)) %>% head(n=10)
colnames(fatalorder) <- c("EVTYPE", "category", "sum")
injorder <- Grouped4 %>% mutate(inj = "injury") %>% select(EVTYPE, inj, injsum) %>% arrange(desc(injsum)) %>% head(n=10)
colnames(injorder) <- c("EVTYPE", "category", "sum")
totorder <- Grouped4 %>% mutate(tot = "total") %>% select(EVTYPE, tot, totsum) %>% arrange(desc(totsum)) %>% head(n=10)
colnames(totorder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(fatalorder, injorder, totorder)
stracked
stacked
barchart(sum~EVTYPE, data = stacked, grouped = category)
stacked1 <- data.frame(stacked)
barchart(sum~EVTYPE, data = stacked1, grouped = category)
barchart(sum~EVTYPE, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category)
barchart(EVTYPE ~ sum, data = stacked, groups = category, auto.key = TRUE)
barchart(sum~EVTYPE, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = TRUE)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types")
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key = list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3, title = "Incident Types"))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3)
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", columns = 3))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
totalorder
totorder
fatorder
fatalorder
totorder
fatalorder
injorder
Grouped4
Grouped3
Grouped2
Grouped2 %>% mutate(propsum = sum(prop), cropsum = sum(crop)) %>% select(EVTYPE, propsum, cropsum)
Grouped2 %>% select(EVTYPE, propsum, cropsum) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
proporder
damage <- Grouped2 %>% select(EVTYPE, prop, crop) %>% summarise(propsum = sum(prop), cropsum=sum(crop))
proporder <- damage %>% mutate(propcat = "prop") %>% select(EVTYPE, propcat, propsum) %>% arrange(desc(propsum)) %>% head(n=10)
colnames(proporder) <- c("EVTYPE", "category", "sum")
croporder <- damage %>% mutate(cropcat = "crop") %>% select(EVTYPE, cropcat, cropsum) %>% arrange(desc(cropsum)) %>% head(n=10)
colnames(croporder) <- c("EVTYPE", "category", "sum")
stacked <- rbind(proporder, croporder)
stacked <- rbind(fatalorder, injorder, totorder)
damagestack <- rbind(proporder, croporder)
damagestack
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = damagestack, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Damage Type (Property, Crop) \n for all years \n in Millions of US Dollars", auto.key=list(space = "bottom", title="", columns = 2))
barchart(EVTYPE ~ sum, data = stacked, groups = category, xlab = "Total Incidents", ylab = "Event Type", main = "FIG 1. Top 10 reasons by Incident Type (fatal, injury, total) \n for all years", auto.key=list(space = "bottom", title="", columns = 3))
```{r, echo=TRUE}
library(dplyr)
library(curl)
library(qdap)
#download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url,destfile="./Data.csv.bz2",method="curl", quiet=TRUE)
data <- read.csv(bzfile("Data.csv.bz2"))
datadf <- tbl_df(data)
```
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
library(datasets)
summary(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
x/mean(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
swirl()
library("swirl")
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(1/(n-2)*sum((fit$residuals)^2))
sqrt(1/(n-2)*sum(fit$residuals^2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit$sigma)
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sum(fit$residuals^2)
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
getwd()
list.files()
cd Regression Model
setwd("Regression Model")
getwd()
list.files()
list.files()
lyfe <- read.xlsx("LyfeStart.xlsx")
library("xlsx")
lyfe <- read.xlsx("LyfeStart.xlsx")
lyfe <- read.xlsx("LyfeStart.xlsx", 1)
list.files()
lyfe <- read.xlsx("RDataforOrders.xlsx", 1)
summary(lyfe)
plot(lyfe$TotalSum)
library("caret")
folds <- createTimeSlices(y=lyfe$OrderDate, initialWindow=20, horizon=10)
folds <- createTimeSlices(y=lyfe, initialWindow=20, horizon=10)
set.seed(10)
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7, list=FALSE)
training <- lyfe[inTrain]
test <- lyfe[-inTrain]
dim(inTrain)
dim(lyfe)
summary(lyfe)
summary(inTrain)
summary(training)
lyfe[inTrain]
lyfe
lyfe[inTrain]
dim(lyfe[inTrain])
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7)
inTrain
lyfe[inTrain]
inTrain <- createDataPartition(y=lyfe$TotalSum, p=0.7, list=FALSE)
inTrain
lyfe
lyfe[inTrain]
training <- lyfe[inTrain]
dim(training)
training
featurePlot(x=training, y=training$TotalSum, plot="pairs")
training$TotalSum
training
training <- lyfe[inTrain,]
training
testing <- lyfe[-inTrain,]
featurePlot(x=training, y=training$TotalSum, plot="pairs")
qplot(CountNew, TotalSum, data = training)
lm(TotalSum ~.)
lm(TotalSum ~., training)
fit <- lm(TotalSum ~., training)
summary(fit)
plot(training$TotalSum)
